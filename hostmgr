#!/bin/bash

# Parse config from config.cfg file
configFile="config.cfg"
while IFS='= ' read varName content
do
  if [[ ! $varName =~ ^\ *# && -n $varName ]]
  then
    content=$(sed 's/\s*$//g' <<< $content)  # Del trailing spaces
    content=$(sed 's/\s*#/#/g' <<< $content) # Del trailing spaces before '#'
    content=$(sed 's/#.*//' <<< $content)    # Del all after '#'
    content="${content%\"*}"                 # Del closing string quotes
    content="${content#\"*}"                 # Del opening string quotes

    declare $varName="$content"
  fi
done < $configFile

# Vars
sslSecured=0
chrootHost=1
hostRedir=0

# Standard user fail protection
if [ "$(id -u)" != "0" ]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

function _help()
{
  echo -e "Usage: $0 {add|remove|suspend|resume|userban} [-h|--help]\n"
  echo "Virtual server creation:"
  echo "  add:            Add a virtual server, and create an user"
  echo -e "\nVirtual server alteration/modification:"
  echo "  remove:         Remove an existing virtual server."
  echo "  suspend:        Suspend an existing virtual server."
  echo "  resume:         Resume an existing virtual server."
  echo -e "\nSpecial:"
  echo "  userban:       Remove user and delete all his hosts."
  exit 1
}

function _helpAdd()
{
  echo -e "Usage: $0 add -s|--server <servername> -u|--user <username> [options]\n"
  echo "Options:"
  echo "  --ssl:          If specified, a Let's Encrypt certificate will be"
  echo "                  generated and will be applied to the virtual server"
  echo -e "\n  --no-chroot:    Do not chroot the virtual server, only for websites"
  echo "                  who uses external programs"
  echo -e "\n  --redir:        With this option enabled, the server will always"
  echo "                  redirect the client to the first domain entered"
  echo "                  Example: $0 add -s www.example.com -s example.com"
  echo "                  will always redirect to www.example.com"
  exit 1
}
function _helpRemove()
{
  echo -e "Usage: $0 remove -s|--server <name>\n"
  exit 1
}

function _helpSuspend()
{
  echo -e "Usage: $0 suspend -s|--server <name>\n"
  exit 1
}
function _helpResume()
{
  echo -e "Usage: $0 resume -s|--server <name>\n"
  exit 1
}

function _helpUserban()
{
  echo -e "Usage: $0 kickuser -u|--user <name>\n"
  exit 1
}

function _checkAll()
{
  # Check for installed dependencies
  echo "Verifying system to find if the script can be executed.."

  # Apache
  echo -n "  * Apache2 install status.. "
  if ! dpkg -l | grep '^ii  apache2 ' > /dev/null
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
  fi

  # Mod rewrite
  echo -n "    [mod] rewrite_module enable status.. "
  if ! apache2ctl -M | grep -e 'rewrite_module' > /dev/null
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
  fi

  # Mod proxy
  echo -n "    [mod] proxy_module enable status.. "
  if ! apache2ctl -M | grep -e 'proxy_module' > /dev/null
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
  fi

  # Mod proxy_fcgi
  echo -n "    [mod] proxy_fcgi enable status.. "
  if ! apache2ctl -M | grep -e 'proxy_fcgi' > /dev/null
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
  fi

  # Mod headers
  echo -n "    [mod] headers_module enable status.. "
  if ! apache2ctl -M | grep -e 'headers_module' > /dev/null
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
  fi

  # PHP
  echo -ne "\n  * PHP install status.. "
  if ! dpkg -l | grep -e '^ii  php7.0 ' -e '^ii  php5.6 ' > /dev/null
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
  fi

  # php-fpm
  echo -n "    [cgi] php*-fpm install status.. "
  if ! dpkg -l | grep '^ii  php.*-fpm ' > /dev/null
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
    echo -n "       -> php*-fpm conf.. "
    if ! grep -qF "include=$userBasePath/*/*/conf.d/pool.cfg" /etc/php/*/fpm/php-fpm.conf
    then
      echo "Warning, auto-configured."
      sed -i -e "s/.*include=/;&/" -e "/;include=/a include=$userBasePath/*/*/conf.d/pool.cfg" /etc/php/*/fpm/php-fpm.conf
    else
      echo "Ok"
    fi
  fi

  # letsencrypt binary
  echo -ne "\n  * letsencrypt binary presence.. "
  if ! which "$letsEncryptExec" > /dev/null
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
  fi

  # letsencrypt dir
  echo -ne "       -> letsencrypt directory presence.. "
  if [ ! -d "$letsEncryptDir" ]
  then
    echo "Failed"
    exit 1
  else
    echo "Ok"
  fi

  touch .allChecked

  echo -e "\nEverything OK."
}

function _createHost()
{
  # If server is not configured, launch creation
  if [ ! -f "/etc/apache2/sites-available/$serverName.conf" ]
  then

    # Check for userBasePath dir
    if [ ! -d "$userBasePath" ]
    then
      echo "Info: The dir '$userBasePath' was not created, creating."
      mkdir -p "$userBasePath"
      chmod 555 "$userBasePath"
    fi

    if [ ! -d "$userDir/web.conf" ]
    then
      _addUser
    fi

    # Making dirs
    echo "Making dirs.."
    echo "   + /"
    mkdir "$serverDir"
    echo "   + /www"
    mkdir "$serverDir/www"
    echo "   + /log"
    mkdir "$serverDir/log"
    echo "   + /conf.d"
    mkdir "$serverDir/conf.d"

    # Setting up default vhost
    echo "   + Copying default website to www/ dir"
    cp -R web.default/* "$serverDir/www/"

    # Pregenerating certificate if needed
    if [ $sslSecured == 1 ]
    then
      _addSSL
    fi

    # Generating config files
    _generateConf

    # PHP requirements in chroot
    if [ $chrootHost == 1 ]
    then
      echo "Copying files to setup chroot.."
      mkdir -p "$serverDir"/{etc,usr/share,var/lib/php/sessions,tmp,dev,lib/x86_64-linux-gnu}
      echo -n " * Local time.. "
      cp /etc/localtime "$serverDir/etc"
      cp -r /usr/share/zoneinfo "$serverDir/usr/share"
      echo "Ok"

      echo " * System files.."
      echo -n "   -> /dev/ stuff.. "
      cp -a /dev/urandom /dev/null /dev/zero "$serverDir"/dev
      cp hosts.default "$serverDir"/etc/hosts
      echo "Ok"

      echo -n "   -> copying libs.. "
      cp -r /lib/x86_64-linux-gnu/* "$serverDir"/lib/x86_64-linux-gnu
      echo "Ok"
    fi

    # Keeping install parameters in conf.d dir
    if [ $sslSecured == 1 ]
    then
      touch "$serverDir"/conf.d/ssl
    fi
    if [ $chrootHost == 1 ]
    then
      touch "$serverDir"/conf.d/chroot
    fi
    if [ $hostRedir == 1 ]
    then
      touch "$serverDir"/conf.d/redir
    fi

    # Fix permissions
    echo -ne "\nFixing permissions for better security.. "
    chmod 750 "$serverDir" -R -f
    chown "$userName:www-data" "$serverDir" -R

    chmod 004 "$serverDir"/conf.d -R
    echo "Done."

    # Reloading php-fpm
    echo -ne "\nReloading php-fpm.. "
    service php*-fpm restart
    echo "Ok."

    # Enabling site
    $0 resume -s "$serverName"
  else
    echo "Error: Server already configured..."
    exit 1
  fi
}

function _removeHost()
{
  if [ -f "/etc/apache2/sites-available/$serverName.conf" ] && [ -d "$serverDir" ]
  then
    # Disabling site
    $0 suspend -s "$serverName"

    # Revoking and removing ssl cert
    if [ -f "$serverDir/conf.d/ssl" ]
    then
      _removeSSL
    fi

    echo -e "\nRemoving files..."
    # Removing files
    rm -rf "$serverDir"
    echo "   - Server dir deleted."

    # Deleting apache virtual server
    rm -f "/etc/apache2/sites-available/$serverName.conf"
    echo "   - Apache configuration for '$serverName' removed."

    # Reloading php-fpm
    echo -ne "\nReloading php-fpm.. "
    service php*-fpm restart
    echo "Ok."

    # Reloading apache2
    echo -n "Reloading apache2.. "
    service apache2 restart
    echo "Ok."
  else
    echo -e "Error: Server not found."
    exit 1
  fi
}

function _addSSL()
{
  echo -e "\nGenerating SSL Let's Encrypt Certificate..."
  echo "   * Setting up web config for Let's Encrypt activation.."
  echo "<Directory $serverDir/www>
  Require all granted
</Directory>
<VirtualHost *:80>
  ServerAdmin $adminEmail
  DocumentRoot $serverDir/www

  ServerName $serverName
  ServerAlias $serverAlias
</VirtualHost>" > "/etc/apache2/sites-enabled/$serverName.conf"

  # Reloading apache2
  echo -n "Reloading apache2.. "
  service apache2 restart
  echo "Ok."

  echo "   *** Generating certificate ***"
  if [ ! -z "$serverAlias" ] # Check if aliases
  then
    $letsEncryptExec certonly --webroot --webroot-path "$serverDir/www/" -d "$serverName" -d "$serverAlias"
  else
    $letsEncryptExec certonly --webroot --webroot-path "$serverDir/www/" -d "$serverName"
  fi

  # Removing apache cfg file needed by Let's Encrypt
  rm "/etc/apache2/sites-enabled/$serverName.conf"

  # Removing temporary files created by Let's Encrypt
  rm -rf "$serverDir/www/.well-known"
}

function _removeSSL()
{
  echo -e "\nCleaning up SSL certificates..."
  echo "   - Revoking SSL Let's Encrypt Certificate for '$serverName'..."
  $letsEncryptExec revoke --cert-path "$letsEncryptDir/live/$serverName/fullchain.pem"
  echo "   - Removing certificate and renewal configuration for '$serverName'..."
  rm -rf "$letsEncryptDir/live/$serverName"
  rm -rf "$letsEncryptDir/archive/$serverName"
  rm "$letsEncryptDir/renewal/$serverName.conf"
}

function _addUser() {
  ftpPassword=$(openssl rand -base64 12)

  # Add an user
  echo -n "Creating new Unix user.. "
  useradd "$userName" --gid www-data --create-home --home-dir "$userDir" --system -s /usr/sbin/nologin
  passwd --lock "$userName" > /dev/null
  echo "Done."

  # Cleaning user dir
  rm -f "$userDir"/.??* > /dev/null

  # Create a subdir to know that is a web user
  mkdir "$userDir"/web.conf

  # Add ftp user
  echo -ne "Creating ftp user.. "
  ( echo "$ftpPassword" ; echo "$ftpPassword" ) | pure-pw useradd "$userName" -u "$userName" -g www-data -d "$userDir" > /dev/null
  pure-pw mkdb
  service pure-ftpd restart
  echo "Done."

  # Creating passwd file to keep password
  echo -e "{\n    \"username\": \"$userName\",\n    \"password\": \"$ftpPassword\"\n}" > "$userDir/web.conf/passwd"

  # Copy readme file to the user root
  cp readme.default "$userDir"/readme

  # Fixing permissions
  chown -R "$userName":www-data "$userDir"
  chmod 550 -R "$userDir"
  chmod 004 "$userDir"/web.conf
}

function _removeUser() {
  # Recursive server remove
  echo "Recursively removing hosts from user dir.."
  serverList=($(ls "$userDir" -I "readme" -I "web.conf"))

  for dir in ${serverList[@]}
  do
    if [ -f "$userDir/$dir/conf.d/pool.cfg" ]
    then
      echo -n "  * $dir found, removing host.. "
      $0 remove -s $dir > /dev/null
      echo "Done."
    else
      echo "  * /conf.d/pool.cfg not found in dir '$dir'"
    fi
  done

  # Removing Unix user
  echo -ne "\nRemoving Unix user.. "
  userdel -rf "$userName" > /dev/null
  echo "Done."

  # Removing ftp user
  echo -n "Removing ftp user.. "
  pure-pw userdel "$userName"
  pure-pw mkdb
  service pure-ftpd restart
  echo "Done."
}

function _generateConf() {
  # Creating apache config file
  echo -e "\nCreating VirtualHost file in '/etc/apache2/sites-available/'"
  echo "<Directory $serverDir/www>
Options -Indexes +FollowSymLinks
AllowOverride AuthConfig Indexes
Require all granted
</Directory>
<VirtualHost *:80>
ServerAdmin $adminEmail
DocumentRoot $serverDir/www

ServerName $serverName
ServerAlias $serverAlias

ErrorLog $serverDir/log/error.log" > "/etc/apache2/sites-available/$serverName.conf"

  # Rewrites
  if [ $hostRedir == 1 ] && [ $sslSecured != 1 ]
  then
    echo -e "\n  <IfModule mod_rewrite.c>
RewriteEngine on
RewriteCond %{HTTP_HOST} !^$serverName$
RewriteRule ^/(.*) http://$serverName/\$1 [R=301,L]
</IfModule>" >> "/etc/apache2/sites-available/$serverName.conf"
  fi

  if [ $sslSecured == 1 ]
  then
    echo -e "\n  <IfModule mod_rewrite.c>
RewriteEngine on
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
</IfModule>
</VirtualHost>
<IfModule mod_ssl.c>
<VirtualHost *:443>
  ServerAdmin $adminEmail
  DocumentRoot $serverDir/www

  ServerName $serverName
  ServerAlias $serverAlias

  ErrorLog $serverDir/log/error.log" >> "/etc/apache2/sites-available/$serverName.conf"

    # Rewrites
    if [ $hostRedir == 1 ] || [ $sslSecured != 1 ]
    then
      echo -e "\n    <IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteCond %{HTTP_HOST} !$serverName
    RewriteRule ^/(.*) http://$serverName/\$1 [R,L]
  </IfModule>" >> "/etc/apache2/sites-available/$serverName.conf"
    fi

    if [ $chrootHost == 1 ]
    then
      echo -e "\n    ProxyPassMatch \"^/(.*\.php(/.*)?)$\" \"unix:/run/php/php-fpm.$serverName.sock|fcgi://localhost/www\"" >> "/etc/apache2/sites-available/$serverName.conf"
    else
      echo -e "\n    ProxyPassMatch \"^/(.*\.php(/.*)?)$\" \"unix:/run/php/php-fpm.$serverName.sock|fcgi://localhost$serverDir/www\"" >> "/etc/apache2/sites-available/$serverName.conf"
    fi

    # Enable HSTS and ssl
    echo -e "\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"

  SSLEngine on
  SSLProtocol all -SSLv2 -SSLv3
  SSLHonorCipherOrder on
  SSLCipherSuite 'EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4'
  SSLCertificateFile $letsEncryptDir/live/$serverName/cert.pem
  SSLCertificateKeyFile $letsEncryptDir/live/$serverName/privkey.pem
  SSLCertificateChainFile $letsEncryptDir/live/$serverName/chain.pem
  SSLOptions +StdEnvVars +ExportCertData
</VirtualHost>
</IfModule>" >> "/etc/apache2/sites-available/$serverName.conf"
  else
    if [ $chrootHost == 1 ]
    then
      echo -e "\n  ProxyPassMatch \"^/(.*\.php(/.*)?)$\" \"unix:/run/php/php-fpm.$serverName.sock|fcgi://localhost/www\"" >> "/etc/apache2/sites-available/$serverName.conf"
    else
      echo -e "\n  ProxyPassMatch \"^/(.*\.php(/.*)?)$\" \"unix:/run/php/php-fpm.$serverName.sock|fcgi://localhost$serverDir/www\"" >> "/etc/apache2/sites-available/$serverName.conf"
    fi
      echo "</VirtualHost>" >> "/etc/apache2/sites-available/$serverName.conf"
  fi

  # Configuring CGI
  echo "Creating php-fpm pool for '$serverName'..."
  echo "[$serverName]
; Define socket
listen = /run/php/php-fpm.$serverName.sock

; Define env var for this instance
env[DOCUMENT_ROOT] = $serverDir/www/" > "$serverDir/conf.d/pool.cfg"

  if [ $chrootHost == 1 ]
  then
    echo -e "\n; Chrooting dir
chroot = $serverDir/

; Default pool settings
chdir = /www/" >> "$serverDir/conf.d/pool.cfg"
  else
    echo -e "\n; Default pool settings
chdir = /" >> "$serverDir/conf.d/pool.cfg"
  fi

  echo "user = $userName
group = www-data
listen.owner = $userName
listen.group = www-data
listen.mode = 0666

pm = ondemand
pm.max_children = 4
pm.process_idle_timeout = 8s
pm.max_requests = 64

; Redirect worker stdout and stderr into main error log. If not set, stdout and
; stderr will be redirected to /dev/null according to FastCGI specs.
catch_workers_output = yes

; Pool mix fix
php_admin_value[opcache.enable] = 0

; Log file
php_admin_flag[log_errors] = on" >> "$serverDir/conf.d/pool.cfg"
  if [ $chrootHost == 1 ]
  then
    echo "php_admin_value[error_log] = /log/phperror.log

; Restrict access
php_admin_value[open_basedir]=/www:/tmp" >> "$serverDir/conf.d/pool.cfg"
  else
    echo "php_admin_value[error_log] = $serverDir/log/phperror.log

; Restrict access
php_admin_value[open_basedir]=$serverDir/www:/tmp" >> "$serverDir/conf.d/pool.cfg"
  fi
}

# Check if dependencies are installed
if [ ! -f .allChecked ]
then
  _checkAll
  echo "Now you can retype your command."
  exit 0
fi

# Parsing arguments
while [ ! -z "$1" ]
do
  case $1 in
    add)
      while [ ! -z "$1" ]
      do
        shift
        case $1 in
          -h | --help)
            _helpAdd
          ;;
          -s | --server)
            shift
            if [ ! -z "$1" ]
            then
              if [ -z "$serverName" ]
              then
                serverName=$1
                else
                  if [ -z "$serverAlias" ]
                  then
                    serverAlias=$1
                  else
                    serverAlias="${serverAlias},$1"
                  fi
                fi
              else
                echo "Error: Please specify a server name after -s|--server argument."
              exit 1
            fi
          ;;
          -u | --user)
            shift
            if [ ! -z "$1" ]
            then
              userName=$1
            else
              echo "Error: Please specify an username after -u|--user argument."
              exit 1
            fi
          ;;

          # Options
          --ssl)
            sslSecured=1
          ;;
          --no-chroot)
            chrootHost=0
          ;;
          --redir)
            hostRedir=1
        esac
      done

      # Check if there is a server name
      if [ -z "$serverName" ]
      then
        echo "Error: No server name specified. Try '$0 add --help'"
        exit 1
      fi

      # Check if there is an user name
      if [ -z "$userName" ]
      then
        echo "Error: No user name specified. Try '$0 add --help'"
        exit 1
      fi

      if [ "$hostRedir" == 1 ] && [ -z "$serverAlias" ]
      then
        echo "Error: You can't request redirecting all aliases to domain, there isn't any alias."
        exit 1
      fi

      # Creating vars
      userDir=$userBasePath/${userName}${userDirSuffix}
      userName=${userName}${userNameSuffix}
      serverDir=$userDir/$serverName

      # Creating host
      _createHost

      exit 0
    ;;
    remove)
      while [ ! -z "$1" ]
      do
        shift
        case $1 in
          -h | --help)
            _helpRemove
          ;;
          -s | --server)
            shift
            if [ ! -z "$1" ]
            then
              if [ -z "$serverName" ]
              then
                serverName=$1
              else
                echo "Error: You can only specify one server name to remove."
                exit 1
              fi
            else
              echo "Error: Please specify a server name after -s|--server argument."
              exit 1
            fi
        esac
      done

      # Check if there is a server name
      if [ -z "$serverName" ]
      then
        echo "Error: No server name specified. Try '$0 remove --help'"
        exit 1
      fi

      # Creating vars
      serverDir=$(find "$userBasePath"/*/ -maxdepth 1 -name "$serverName")

      # Removing host
      _removeHost

      exit 0
    ;;
    suspend)
      while [ ! -z "$1" ]
      do
        shift
        case $1 in
          -h | --help)
            _helpSuspend
          ;;
          -s | --server)
            shift
            if [ ! -z "$1" ]
            then
              if [ -z "$serverName" ]
              then
                serverName=$1
              else
                echo "Error: You can only specify one server name to suspend."
                exit 1
              fi
            else
              echo "Error: Please specify a server name after -s|--server argument."
              exit 1
            fi
        esac
      done

      # Check if there is a server name
      if [ -z "$serverName" ]
      then
        echo "Error: No server name specified. Try '$0 remove --help'"
        exit 1
      fi

      if [ -f "/etc/apache2/sites-available/$serverName.conf" ] && [ -f "/etc/apache2/sites-enabled/$serverName.conf" ]
      then
        # So, disable the vhost
        a2dissite "$serverName" > /dev/null
        echo "* Disabled site '$serverName'"
      else
        echo "Error: Server not found or already enabled."
        exit 1
      fi

      # Reloading apache2
      echo -n "Reloading apache2.. "
      service apache2 restart
      echo "Ok."

      exit 0
    ;;
    resume)
      while [ ! -z "$1" ]
      do
        shift
        case $1 in
          -h | --help)
            _helpResume
          ;;
          -s | --server)
            shift
            if [ ! -z "$1" ]
            then
              if [ -z "$serverName" ]
              then
                serverName=$1
              else
                echo "Error: You can only specify one server name to resume."
                exit 1
              fi
            else
              echo "Error: Please specify a server name after -s|--server argument."
              exit 1
            fi
        esac
      done

      # Check if there is a server name
      if [ -z "$serverName" ]
      then
        echo "Error: No server name specified. Try '$0 remove --help'"
        exit 1
      fi

      if [ -f "/etc/apache2/sites-available/$serverName.conf" ] && [ ! -f "/etc/apache2/sites-enabled/$serverName.conf" ]
      then
        # So, enable the vhost
        a2ensite "$serverName" > /dev/null
        echo "* Enabled site '$serverName'"
        else
        echo "Error: Server not found or already enabled."
        exit 1
      fi

      # Reloading apache2
      echo -n "Reloading apache2.. "
      service apache2 restart
      echo "Ok."

      exit 0
    ;;
    userban)
      while [ ! -z "$1" ]
      do
        shift
        case $1 in
          -h | --help)
            _helpUserban
          ;;
          -u | --user)
            shift
            if [ ! -z "$1" ]
            then
              userName=$1
            else
              echo "Error: Please specify an username after -u|--user argument."
              exit 1
            fi
          ;;
        esac
      done

      # Check if there is an user name
      if [ -z "$userName" ]
      then
        echo "Error: No user name specified. Try '$0 userban --help'"
        exit 1
      fi

      # Creating vars
      userDir=$userBasePath/${userName}${userDirSuffix}
      userName=${userName}${userNameSuffix}

      if [ ! -d "$userDir/web.conf" ]
      then
        echo "Error: User not found or not www user !"
        exit 1
      fi

      # Remove user and host recursively
      _removeUser

      exit 0
    ;;
      -h | --help)
        break
  esac
  shift
done

# If loop broken call _help()
_help
