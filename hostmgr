#!/bin/bash

# Defines
letsEncryptExec=letsencrypt
letsEncryptDir=/etc/letsencrypt
adminEmail=root@yourserver.com

userBasePath=/home/web
userNameSuffix=
# DO NOT EDIT AFTER HERE #

# Vars
sslSecured=0
chrootHost=1

# Standard user fail protection
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

function _help()
{
    echo -e "Usage: $0 {add|remove} [-h|--help]\n"
    echo "  add:            Add a virtual server, and create an user"
    echo "  remove:         Remove an existing virtual server from apache."
    exit 1
}

function _helpAdd()
{
    echo -e "Usage: $0 add -s|--server <name> -u|--user <name> [options]\n"
    echo "Options:"
    echo "  --ssl:          If specified, a Let's Encrypt certificate will be"
    echo "                  generated and will be applied to the virtual server"
    echo "  --no-chroot:    Do not chroot the virtual server, only for websites"
    echo "                  who uses external programs"
    exit 1
}
function _helpRemove()
{
    echo -e "Usage: $0 remove -s|--server <name>\n"
    exit 1
}

function _createHost()
{
    # If server is not configured, launch creation
    echo -n "Checking if vhost is existing... "
    if [ ! -f /etc/apache2/sites-available/$serverName.conf ]
    then
        echo -e "No\n"
        
        if [ ! -f $userDir/.wwwUser ]
        then
            # Check for userBasePath dir
            if [ ! -d $userBasePath ]
            then
                echo "Info: The dir '$userBasePath' was not created, creating."
                mkdir -p $userBasePath
            fi

            # Add an user
            echo "Creating new user '$userName'..."
            useradd $userName -d $userDir --create-home --system -s /usr/sbin/nologin

            # Adding a lock file in user dir to protect other users from removing
            echo "Locking dir for '$userName'..."
            touch $userDir/.wwwUser
            
            echo "Disabling access to '$userDir/.wwwUser' to user '$userName'"
            chmod 466 $userDir/.wwwUser
        fi
        
        # Making dirs
        echo "   + $serverDir"
        mkdir $serverDir
        echo "   + $serverDir/www"
        mkdir $serverDir/www
        echo "   + $serverDir/log"
        mkdir $serverDir/log
        
        # Pregenerating certificate if needed
        if [ $sslSecured == 1 ]
        then
            _addSSL
        fi

        # Creating apache config file
        echo -e "\nCreating VirtualHost file in '/etc/apache2/sites-available/'"
        echo "<Directory $serverDir/www/>
    Options -Indexes -FollowSymLinks +MultiViews
    AllowOverride None
    Require all granted
</Directory>
<VirtualHost *:80>
    ServerAdmin $adminEmail
    DocumentRoot $serverDir/www/

    ServerName $serverName
    ServerAlias $serverAlias

    ErrorLog $serverDir/log/error.log" > /etc/apache2/sites-available/$serverName.conf
        
        if [ $sslSecured == 1 ]
        then
            echo "    <IfModule mod_rewrite.c>
        RewriteEngine on
        RewriteCond %{HTTPS} off
        RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
    </IfModule>
</VirtualHost>
<IfModule mod_ssl.c>
    <VirtualHost *:443>
        ServerAdmin $adminEmail
        DocumentRoot $serverDir/www/

        ServerName $serverName
        ServerAlias $serverAlias

        ErrorLog $serverDir/log/error.log" >> /etc/apache2/sites-available/$serverName.conf
        
            if [ $chrootHost == 1 ]
            then
                echo "        ProxyPassMatch \"^/(.*\.php(/.*)?)$\" \"unix:/run/php/php-fpm.$serverName.sock|fcgi://localhost/www" >> /etc/apache2/sites-available/$serverName.conf
            else
                echo "        ProxyPassMatch \"^/(.*\.php(/.*)?)$\" \"unix:/run/php/php-fpm.$serverName.sock|fcgi://localhost$serverDir/www" >> /etc/apache2/sites-available/$serverName.conf
            fi
            echo "        Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"

        SSLEngine on
        SSLProtocol all -SSLv2 -SSLv3
        SSLHonorCipherOrder on
        SSLCipherSuite 'EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4'
        SSLCertificateFile $letsEncryptDir/live/$serverName/cert.pem
        SSLCertificateKeyFile $letsEncryptDir/live/$serverName/privkey.pem
        SSLCertificateChainFile $letsEncryptDir/live/$serverName/chain.pem
        SSLOptions +StdEnvVars +ExportCertData
    </VirtualHost>
</IfModule>" >> /etc/apache2/sites-available/$serverName.conf
        else
            if [ $chrootHost == 1 ]
            then
                echo "        ProxyPassMatch \"^/(.*\.php(/.*)?)$\" \"unix:/run/php/php-fpm.$serverName.sock|fcgi://localhost/www" >> /etc/apache2/sites-available/$serverName.conf
            else
                echo "        ProxyPassMatch \"^/(.*\.php(/.*)?)$\" \"unix:/run/php/php-fpm.$serverName.sock|fcgi://localhost$serverDir/www" >> /etc/apache2/sites-available/$serverName.conf
            fi
            echo "</VirtualHost>" >> /etc/apache2/sites-available/$serverName.conf
        fi
        
        # Configuring CGI
        echo "Creating php-fpm pool for '$serverName'..."
        echo "[$serverName]
; Define socket
listen = /run/php/php-fpm.$serverName.sock

; Define env var for this instance
env[DOCUMENT_ROOT] = $serverDir/www/" > $serverDir/pool.cfg

        if [ $chrootHost == 1 ]
        then
            echo -e "\n; Chrooting dir
chroot = $serverDir/

; Default pool settings
chdir = /www/" >> $serverDir/pool.cfg
        else
            echo -e "\n; Default pool settings
chdir = /" >> $serverDir/pool.cfg
        fi
     
        echo "user = $userName
group = $userName
listen.owner = $userName
listen.group = $userName
listen.mode = 0666
pm = ondemand
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3

; Redirect worker stdout and stderr into main error log. If not set, stdout and
; stderr will be redirected to /dev/null according to FastCGI specs.
catch_workers_output = yes

; PHP Settings
php_admin_flag[log_errors] = on" >> $serverDir/pool.cfg
        if [ $chrootHost == 1 ]
        then
            echo "php_admin_value[error_log] = /log/phperror.log" >> $serverDir/pool.cfg
        else
            echo "php_admin_value[error_log] = $serverDir/log/phperror.log" >> $serverDir/pool.cfg
        fi

        # PHP requirements in chroot
        if [ $chrootHost == 1 ]
        then
            echo "Adding PHP dependencies in chroot directory"
            mkdir -p $serverDir/{etc,usr/share,var/lib/php/sessions,tmp}
            cp /etc/localtime $serverDir/etc
            cp -r /usr/share/zoneinfo $serverDir/usr/share/ 
        fi
        
        # Checking for PHP-FPM include config
        if ! grep -qF "include=$userBasePath/*/*/pool.cfg" /etc/php/*/fpm/php-fpm.conf
        then
            echo "Info: No include for pools in php-fpm config, automatically adding."
            sed -i -e "s/.*include=/;&/" -e "/;include=/a include=$userBasePath/*/*/pool.cfg" /etc/php/*/fpm/php-fpm.conf
        fi

        # Creating default served file
        echo "   + Moving default page to the user ~/www/ dir"
        cp index.php $serverDir/www/index.php

        # Creating new ftp user
        echo "Adding ftp user '$ftpUser'..."
        ( echo $ftpPassword ; echo $ftpPassword ) | pure-pw useradd $ftpUser -u $userName -d $serverDir/www/ -m > /dev/null
        pure-pw mkdb
        service pure-ftpd restart

        # Creating ftp password file
        echo -e "{\n    \"username\": \"$ftpUser\",\n    \"password\": \"$ftpPassword\"\n}" > $serverDir/userpass

        # Fixing permissions
        echo "Gaining access to '$serverDir/' to user '$userName' recursively..."
        chmod 755 $serverDir -R
        echo "   * Fixed permissions to '755'..."
        chown $userName:$userName $serverDir -R
        echo "   * Fixed owner to '$userName'"

        if [ $sslSecured == 1 ]
        then
            echo "Disabling access to '$serverDir/{pool.cfg,userpass,.sslCert}' to user '$userName'..."
            chmod 466 $serverDir/{pool.cfg,userpass,.sslCert}
        echo "   * Fixed permissions to '466'..."
        else
            echo "Disabling access to '$serverDir/{pool.cfg,userpass}' to user '$userName'..."
            chmod 466 $serverDir/{pool.cfg,userpass}
        fi
        
        # Enabling site
        echo "Enabling site '$serverName'."
        a2ensite $serverName
    else
        echo -e "Yes\n"
        
        echo "Error: '$serverName' is already configured..."
        exit 1
    fi
}

function _removeHost()
{
    echo -n "Checking if vhost is existing... "
    if [ -f /etc/apache2/sites-available/$serverName.conf ] && [ -d "$serverDir" ]
    then
	echo "Ok"
        
        # Revoking and removing ssl cert
        if [ -f "$serverDir/.sslCert" ]
        then
            _removeSSL
        fi

        echo -e "\nRemoving user and files..."
        # Removing ftp user
        pure-pw userdel $ftpUser -m
        pure-pw mkdb
        service pure-ftpd restart
        echo "   - FTP user '$ftpUser' deleted."
        
        # Removing files
        rm -rf $serverDir
        echo "   - '$serverDir/' dir deleted."

        # Deleting apache virtual server
        rm -f /etc/apache2/sites-available/$serverName.conf
        echo "   - Configuration for '$serverName' removed in apache directory."
    else
        echo "Failed"
        
        echo -e "Error: '$serverName' is not a valid server name..."
        exit 1
    fi
}

function _addSSL()
{
    echo -e "\nGenerating SSL Let's Encrypt Certificate..."
    echo "   * Setting up web config for Let's Encrypt activation.."
    echo "<Directory $serverDir/www/>
    Options -Indexes -FollowSymLinks +MultiViews
    AllowOverride None
    Require all granted
</Directory>
<VirtualHost *:80>
    ServerAdmin $adminEmail
    DocumentRoot $serverDir/www/

    ServerName $serverName
    ServerAlias $serverAlias
</VirtualHost>" > /etc/apache2/sites-available/$serverName.conf

    echo "   * Reloading apache.."
    service apache2 reload
    echo "   *** Generating certificate ***"
    if [ ! -z $serverAlias ] # Check if aliases
    then
        $letsEncryptExec certonly --webroot --webroot-path $serverDir/www/ -d $serverName -d $serverAlias
    else
        $letsEncryptExec certonly --webroot --webroot-path $serverDir/www/ -d $serverName
    fi

    # Touching file to know we have an ssl cert
    touch $serverDir/.sslCert

    # Removing temporary files created by Let's Encrypt
    rm -rf $serverDir/www/.well-known
}

function _removeSSL()
{
    echo -e "\nCleaning up SSL certificates..."
    echo "   - Revoking SSL Let's Encrypt Certificate for '$serverName'..."
    $letsEncryptExec revoke --cert-path $letsEncryptDir/live/$serverName/fullchain.pem
    echo "   - Removing certificate and renewal configuration for '$serverName'..."
    rm -rf $letsEncryptDir/live/$serverName
    rm -rf $letsEncryptDir/archive/$serverName
    rm -f $letsEncryptDir/renewal/$serverName.conf
    
    # Removing file to know we don't an ssl cert
    rm $serverDir/.sslCert
}

# Parsing arguments
while [ ! -z $1 ]
do
    case $1 in
        add)
            while [ ! -z $1 ]
            do
                shift
                case $1 in
                    -h | --help)
                        _helpAdd
                    ;;
                    -s | --server)
                        shift
                        if [ ! -z $1 ]
                        then
                            if [ -z $serverName ]
                            then
                                serverName=$1
                            else
                                if [ -z $serverAlias ]
                                then
                                    serverAlias=$1
                                else
                                    serverAlias="${serverAlias},$1"
                                fi
                            fi
                        else
                            echo "Error: Please specify a server name after -s|--server argument."
                            exit 1
                        fi
                    ;;
                    -u | --user)
                        shift
                        if [ ! -z $1 ]
                        then
                            userName=$1$userNameSuffix
                        else
                            echo "Error: Please specify an username after -u|--user argument."
                            exit 1
                        fi
                    ;;
                     
                    # Options
                    --ssl)
                        sslSecured=1
                    ;;
                    --no-chroot)
                        chrootHost=0
                esac
            done

            # Check if there is a server name
            if [ -z $serverName ]
            then
                echo "Error: No server name specified. Try '$0 add --help'"
                exit 1
            fi

            # Check if there is an user name
            if [ -z $userName ]
            then
                echo "Error: No user name specified. Try '$0 add --help'"
                exit 1
            fi
            
            # Check if username is taken by an user who is not a www user.
            getent passwd $userName >/dev/null 2>&1 && userExists=true
            if [[ $userExists == true ]] && [[ ! -f $userBasePath/$userName/.wwwUser ]]
            then
                echo "Error: The username '$userName' exists and is not a www user."
                exit 1
            fi

            # Creating vars 
            userDir=$userBasePath/$userName
            serverDir=$userDir/$serverName
            ftpUser=$(echo "$serverName" | tr . -)
            ftpPassword=$(openssl rand -base64 10)
            
            _createHost

            # Applying conf
            echo "Reloading apache config"
            service apache2 reload

            echo "Reloading php-fpm config"
            service php*-fpm restart

            echo "Stored ftp login and password in '$serverDir/userpass'"
            echo "Done."
            exit 0
        ;;
        remove)
            while [ ! -z $1 ]
            do
                shift
                case $1 in
                    -h | --help)
                        _helpRemove
                    ;;
                    -s | --server)
                        shift
                        if [ ! -z $1 ]
                        then
                            if [ -z $serverName ]
                            then
                                serverName=$1
                            else
                                echo "Error: You can only specify one server name to remove."
                                exit 1
                            fi
                        else
                            echo "Error: Please specify a server name after -s|--server argument."
                            exit 1
                        fi
                esac
            done

            # Check if there is a server name
            if [ -z $serverName ]
            then
                echo "Error: No server name specified. Try '$0 remove --help'"
                exit 1
            fi

            # Creating vars
            serverDir=$(find $userBasePath/*/ -maxdepth 1 -name $serverName)
            ftpUser=$(echo "$serverName" | tr . -)
            
            _removeHost
            
            # Applying conf
            echo "Reloading apache config"
            service apache2 reload

            echo "Reloading php-fpm config"
            service php*-fpm restart

            echo "Done."
            exit 0
        ;;
        -h | --help)
            break
        ;;
    esac
    shift
done

# If loop broken call _help()
_help
